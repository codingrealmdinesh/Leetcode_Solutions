class Node:
    def __init__(self, pt1, pt2, sum, lt=None, rt=None, lb=None, rb=None):
        self.pt1, self.pt2 = pt1, pt2
        self.sum = sum
        self.lt, self.rt, self.lb, self.rb = lt, rt, lb, rb

class NumMatrix:

    def __init__(self, matrix: List[List[int]]):
        if not matrix or not matrix[0]: return 
        
        def buildTree(pt1=(0, 0), pt2=(len(matrix)-1, len(matrix[0])-1)):
            if pt1 == pt2: 
                return Node(pt1, pt2, matrix[pt1[0]][pt1[1]])
            
            if pt1[0] > pt2[0] or pt1[1] > pt2[1]: return None
            
            mid1, mid2 = (pt1[0] + pt2[0]) // 2,  (pt1[1] + pt2[1]) // 2
            
            lt = buildTree(pt1, (mid1, mid2))
            rt = buildTree((pt1[0], mid2+1), (mid1, pt2[1]))
            lb = buildTree((mid1+1, pt1[1]), (pt2[0], mid2))
            rb = buildTree((mid1+1, mid2+1), pt2)
            node_sum = sum(n.sum for n in [lt, rt, lb, rb] if n)
            
            return Node(pt1, pt2, node_sum, lt, rt, lb, rb)
        
        self.root = buildTree()
            

    def update(self, row: int, col: int, val: int) -> None:
                
        def update1(node=self.root):
            # print(f'update {(i, j)} at node {node.pt1}, {node.pt2}')
            
            if node.pt1 == node.pt2 == (row, col):
                node.sum = val
                return 
            
            pt1, pt2 = node.pt1, node.pt2
            mid1, mid2 = (pt1[0] + pt2[0]) // 2,  (pt1[1] + pt2[1]) // 2
            
            if pt1[0] <= row <= mid1 and pt1[1] <= col <= mid2: 
                update1(node.lt)
            elif pt1[0] <= row <= mid1 and mid2+1 <= col <= pt2[1]: 
                update1(node.rt)
            elif mid1+1 <= row <= pt2[0] and pt1[1] <= col <= mid2: 
                update1(node.lb)
            elif mid1+1 <= row <= pt2[0] and mid2+1 <= col <= pt2[1]: 
                update1(node.rb)
                
            node.sum = sum(n.sum for n in [node.lt, node.rt, node.lb, node.rb] if n)
        
        update1()

    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:
        
        def sumRegion1(i1=row1, j1=col1, i2=row2, j2=col2, node=self.root):
            if not node or i1 > i2 or j1 > j2: 
                return 0
            if node.pt1 == (i1, j1) and node.pt2 == (i2, j2):
                return node.sum
            
            mid1, mid2 = (node.pt1[0] + node.pt2[0]) // 2,  (node.pt1[1] + node.pt2[1]) // 2
            
            # print(f'sum from {(i1, j1)} to {(i2, j2)} where node is {pt1}, {pt2}')
            return (sumRegion1(i1, j1, min(mid1, i2), min(mid2, j2), node.lt) 
                    + sumRegion1(max(mid1+1, i1), j1, i2, min(mid2, j2), node.lb) 
                    + sumRegion1(i1, max(mid2+1, j1), min(mid1, i2), j2, node.rt) 
                    + sumRegion1(max(mid1+1, i1), max(mid2+1, j1), i2, j2, node.rb) 
                   )
        
        return sumRegion1()

class NumMatrix:

    def __init__(self, matrix: List[List[int]]):
        m, n = len(matrix), len(matrix[0]) if matrix else 0
        self.bit = [[0 for _ in range(n+1)] for _ in range(m+1)]
        for i in range(1,m+1):
            for j in range(1,n+1):
                self.bit[i][j] += matrix[i-1][j-1]
                if (i + (i & (-i))) <= m:
                    self.bit[(i + (i & (-i))) ][j] += self.bit[i][j]
            for j in range(1,n+1):
                if (j + (j & (-j))) <= n:
                    self.bit[i][j + (j & (-j))] += self.bit[i][j]

    def update(self, row: int, col: int, val: int) -> None:
        val -= self.sumRegion(row, col, row, col)
        row, col = row + 1, col + 1
        x = row
        while x < len(self.bit):
            y = col
            while y < len(self.bit[0]):
                self.bit[x][y] += val
                y += y & -y
            x += x & -x
        
    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:
        row1, col1, row2, col2 = row1+1, col1+1, row2+1, col2+1
        def prefixQuery(row, col):
            res = 0
            x = row
            while x:
                y = col
                while y:
                    res += self.bit[x][y]
                    y -= y & -y
                x -= x & -x
            return res
        
        return prefixQuery(row2,col2)+prefixQuery(row1-1,col1-1)-prefixQuery(row1-1,col2)-prefixQuery(row2, col1-1)